#!/bin/bash

###########################################
## yasi # Yet Another Subleq Interpreter ##
###########################################

# Made by jumps-are-op
# This software is under GPLv3 and comes with ABSOLUTE NO WARRANTY

main(){
	[ "$#" = 0 ] && disHelp

	inputs=("$@")
	for ((i=0; i < $#; i++));do
		case "${inputs[i]}" in
			--stdin)mem+=( "$(tr '\n' ' ')" );;
			--file)mem+=( "$(tr '\n' ' '<"${inputs[i+1]}")" );((i++));;
			-*)disHelp;;
			*)mem+=( "$(tr '\n' ' '<"${inputs[i]}")" );;
		esac
	done

	# Check if input is empty
	[ "${#mem[@]}" = 0 ] && echo "${0##*/}: Empty input." >/dev/stderr&& exit 1

	# Check for strings
	if grep -qv "\([-+]*[0-9]\+\(\.[0-9]\+\)*\)*"<<<"${mem[@]}";then
		{
		echo "[31mStrings are not allowed in run time.[m"
		grep -A3 -B3 -nv "\([-+]*[0-9]\+\(\.[0-9]\+\)*\)$"<<<"${mem[@]// /\n}"
		} > /dev/stderr
		exit 1
	fi

	# init memory
	IFS=" "
	read -ra mem<<<"${mem[@]}"
	addr=0

	# Run time
	until [ "$addr" -lt 0 ] || [ "$addr" -ge "${#mem[@]}" ];do
		a=${mem[addr]}
		b=${mem[addr+1]}
		c=${mem[addr+2]}
		(( addr += 3 ))
		[ "$a" -lt 0 ] && [ "$b" -lt 0 ] &&
			{
				echo "${0##*/}: $addr: a and b cannot be both less than 0"
				exit 2
			} >/dev/stderr
	
		if [ "$a" -lt 0 ];then
			mem[b]=$(LC_CTYPE=C printf "%d" "$(head -c -1)")
	
		elif [ "$b" -lt 0 ];then
			printf '%b' '\x'"$(printf '%x' "${mem[$a]}")"
	
		else
			(( (mem[b] -= mem[a]) <= 0 )) && addr="$c"
		fi
	
	done
	
	exit 0
}

# Display help message
disHelp(){
	echo 'YASI (Yet Another Subleq Interpreter)                              '
	echo '                                                                   '
	echo 'usage: yasi OPTIONS [FILE|STDIN]                                   '
	echo 'OPTIONS:                                                           '
	echo ' --stdin        Take input as stdin                                '
	echo ' --file FILE    Take input as file                                 '
	echo ' --help         Display help (This message)                        '
	exit 1
}

main "$@"
